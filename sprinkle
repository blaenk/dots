#!/bin/bash

set -e

# determine path to dots dir
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
DOTPATH="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

# utility functions
function info() {
  printf "\r$(tput el)  $(tput setaf 4)·$(tput sgr0) $1\n"
}

function user() {
  printf "\r  $(tput setaf 5)?$(tput sgr0) $1 "
}

function success() {
  printf "\r$(tput el)  $(tput setaf 2)+$(tput sgr0) $1\n"
}

function fail() {
  printf "\r$(tput el)  $(tput setaf 1)-$(tput sgr0) $1\n"
}

function link_files() {
  ln -s $1 $2
  success "linked $1 $(tput setaf 2)→$(tput sgr0) $2"
}

function deploy() {
  echo ''
  info "sprinkling dots from $DOTPATH!"
  info "help: "\
"$(tput bold)b$(tput sgr0)ackup, "\
"$(tput bold)o$(tput sgr0)verwrite, "\
"$(tput bold)r$(tput sgr0)emove, "\
"$(tput bold)s$(tput sgr0)kip\n"\
"          capitalize to apply to all remaining\n"

  overwrite_all=false
  backup_all=false
  skip_all=false
  remove_all=false

  for src in `find "$DOTPATH" -mindepth 2 -maxdepth 2  -name .\* ! -path "$DOTPATH/.git*"`; do
    dest="$HOME/`basename \"$src\"`"

    if [ -e $dest ] || [ -L $dest ]; then
      overwrite=false
      backup=false
      skip=false
      remove=false
      fname="$(tput bold)`basename $dest`$(tput sgr0)"

      if [ "$overwrite_all" == "false" ] &&\
         [ "$backup_all" == "false" ] &&\
         [ "$remove_all" == "false" ] &&\
         [ "$skip_all" == "false" ]; then
        if [ ! -L $dest ]; then
          user "$fname exists non-linked:"
        else
          link=`readlink -mn "$dest"`
          user "$fname is already linked to $link:"
        fi

        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          r )
            remove=true;;
          R )
            remove_all=true;;
          * )
            ;;
        esac
      fi

      if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]; then
        if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ] ||\
           [ "$remove" == "true" ] || [ "$remove_all" == "true" ]; then
          rm -rf $dest
          fail "removed $fname"
        fi

        if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]; then
          mv $dest{,.bak}
          success "moved $fname to $fname.bak"
        fi

        if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ] ||\
           [ "$backup" == "true" ] || [ "$backup_all" == "true" ]; then
          link_files $src $dest
        fi
      else
        info "skipped $fname"
      fi

    else
      link_files $src $dest
    fi
  done
}

deploy

