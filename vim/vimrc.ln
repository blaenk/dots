set nocompatible
set encoding=utf-8
set fenc=utf-8
set termencoding=utf-8

if has('win32')
  set rtp+=~/.vim
endif

colorscheme solarized
set background=light
syntax on

" awesome trick by github.com/rson
" if !isdirectory(expand("~/.vim/bundle/vundle/.git"))
"   !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
" endif

source ~/.vim/conf/bundles.vim

let mapleader = ","

nnoremap <silent> <leader>s :set spell!<CR>
nnoremap <silent> <leader>u :GundoToggle<CR>
nnoremap <silent> <leader>l :noh<CR>

" consider hjkl cartesian x/y axis with
" positve up and right, negative left down
nnoremap <C-J> <C-W>-
nnoremap <C-K> <C-W>+
nnoremap <C-L> <C-W>>
nnoremap <C-H> <C-W><

vnoremap > >gv
vnoremap < <gv

" tab navigation
nnoremap <M-h> gT
nnoremap <M-l> gt

nnoremap <silent> <M-j> :execute "tabmove" tabpagenr() - 2<CR>
nnoremap <silent> <M-k> :execute "tabmove" tabpagenr()<CR>

" meta key copying like in map
nnoremap <M-c> y
nnoremap <M-v> p

vnoremap <M-c> y
vnoremap <M-v> p

imap <M-v> <C-r>+

" linux
if has('unix') && 'Darwin' != system('echo -n "$(uname)"')
  set t_Co=256

  set guifont=DejaVu\ Sans\ Mono\ 10

  " make the default clipboard be X11's
  set clipboard=unnamedplus

" mac
elseif has('unix') && 'Darwin' == system('echo -n "$(uname)"')
  set gfn=Menlo:h12
  " this doesn't work in mountain lion's default vim (does on macvim)
  set clipboard=unnamed

" windows
elseif !has('unix')
  set gfn=Consolas:h10
  set clipboard=unnamed
endif

let g:pantondoc_use_pandoc_markdown = 1
let g:pantondoc_formatting_settings = 's'
let g:pandoc_use_embeds_in_codeblocks_for_langs = []

let g:ycm_filetype_whitelist = {'cpp': 0}

let g:gitgutter_enabled = 0
let g:gitgutter_realtime = 0
let g:gitgutter_sign_modified = '#'

nnoremap <leader>g :GitGutterToggle<CR>
nnoremap <leader>r :RainbowParenthesesToggle<CR>

let g:pandoc_no_empty_implicits = 1

let g:ctrlp_map = '<leader>f'
let g:ctrlp_custom_ignore = {
  \ 'dir': '\v[\/](\.(git|hg|svn))|deploy|dist|generated|build$',
  \ 'file': '\v\.(DS_Store)$',
  \ }
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_open_new_file = 't'
let g:ctrlp_open_multiple_files = 't'
let g:ctrlp_prompt_mappings = {
  \ 'AcceptSelection("t")': ['<cr>'],
  \ 'AcceptSelection("e")': ['<s-cr>']
  \ }

"let g:ctrlp_working_path_mode = 1 set working dir to parent dir of cur file
map <leader>b :CtrlPBuffer<cr>

" objective-c
let g:alternateExtensions_m = "h"
let g:alternateExtensions_h = "m"

let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1

set textwidth=0
set wrapmargin=0
nnoremap <silent> <M-p> :set paste!<CR>
set backspace=indent,eol,start
set backup
set backupdir=~/.vim/backups
set directory=~/.vim/tmp
set undodir=~/.vim/undo
set tags=./tags;
let g:easytags_dynamic_files = 1
"let g:easytags_file = '~/.vim/tags'

cmap w!! %!sudo tee > /dev/null %

map <Leader>o o<Esc>ko
set laststatus=2
set tabstop=2
set shiftwidth=0
set expandtab
set softtabstop=2
set autoindent
set gcr+=a:blinkon0
set undofile

filetype plugin indent on

augroup filespecific
  autocmd!
  au BufRead,BufNewFile *.json set filetype=javascript
  au BufRead,BufNewFile *.py set tabstop=4
augroup END

set wildmenu
set wildmode=list:longest

set showmode
set showcmd
set hidden
set visualbell
set cursorline
set ttyfast
set relativenumber
set number

"nnoremap / /\v
"vnoremap / /\v
set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch

set splitbelow
set splitright

set wrap
set listchars=tab:▸\ ,eol:¬
set list

function! Status(winnr)
  let stat = ""
  let active = winnr() == a:winnr

  function! Color(active, num, content)
    if a:active
      return '%' . a:num . '*' . a:content . '%*'
    else
      return a:content
    endif
  endfunction

  " column
  let stat .= '%1*' . (col(".") / 100 >= 1 ? '%v ' : ' %2v ') . '%*'

  " file
  let stat .= Color(active, 4, active ? ' »' : ' «')
  let stat .= ' %<%f '
  let stat .= Color(active, 4, active ? '«' : '»')

  " file modified
  let stat .= Color(active, 2, getbufvar(winbufnr(a:winnr), '&modified') == 1 ? ' +' : '')

  " read only
  let stat .= Color(active, 2, getbufvar(winbufnr(a:winnr), '&ro') == 1 ? ' ‼' : '')

  " paste
  if active && &paste
    let stat .= ' %2*' . 'P' . '%*'
  endif

  " right side
  let stat .= '%='

  " git branch
  if exists('*fugitive#head')
    let head = fugitive#head()

    if empty(head) && exists('*fugitive#detect') && !exists('b:git_dir')
      call fugitive#detect(getcwd())
      let head = fugitive#head()
    endif
  endif

  if !empty(head)
    let stat .= Color(active, 3, ' ← ') . head . ' '
  endif

  return stat
endfunction

function! SetStatus()
  " inactives
  for nr in filter(range(1, winnr('$')), 'v:val != winnr()')
    call setwinvar(nr, '&statusline', '%!Status('.nr.')')
  endfor

  " actives
  let nr = winnr()
  call setwinvar(nr, '&statusline', '%!Status('.nr.')')
endfunction

augroup status
  autocmd!
  autocmd VimEnter,WinEnter,BufWinEnter,BufUnload * call SetStatus()
augroup END

augroup cursorline
  autocmd!
  autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  autocmd WinLeave * setlocal nocursorline
augroup END

let g:solarized_termcolors = 256

hi User1 ctermfg=33  guifg=#268bd2  ctermbg=15 guibg=#fdf6e3 gui=bold
hi User2 ctermfg=125 guifg=#d33682  ctermbg=7  guibg=#eee8d5 gui=bold
hi User3 ctermfg=64  guifg=#719e07  ctermbg=7  guibg=#eee8d5 gui=bold
hi User4 ctermfg=37  guifg=#2aa198  ctermbg=7  guibg=#eee8d5 gui=bold

hi CtrlP_Purple  ctermfg=255 guifg=#ffffff  ctermbg=54  guibg=#5f5faf gui=bold
hi CtrlP_IPurple ctermfg=54  guifg=#5f5faf  ctermbg=255 guibg=#ffffff gui=bold
hi CtrlP_Violet  ctermfg=54  guifg=#5f5faf  ctermbg=147 guibg=#aeaed7 gui=bold

let g:ctrlp_status_func = {
  \ 'main': 'CtrlP_main_status',
  \ 'prog': 'CtrlP_progress_status'
  \}

" Arguments: focus, byfname, s:regexp, prv, item, nxt, marked
"            a:1    a:2      a:3       a:4  a:5   a:6  a:7
fu! CtrlP_main_status(...)
  let byfname = '%#CtrlP_Violet# '.a:2.' %*'
  let regex = a:3 ? '%#CtrlP_Violet#regex %*' : ''
  let prv = '%#CtrlP_Purple# '.a:4.' %*'
  let item = '%#CtrlP_IPurple# '.a:5.' %*'
  let nxt = '%#CtrlP_Purple# '.a:6.' %*'
  let dir = '%#CtrlP_Violet#%=%*%<%#CtrlP_Violet# '.getcwd().' %*'
  retu prv . item . nxt . byfname . regex . dir
endf
 
" Argument: len
"           a:1
fu! CtrlP_progress_status(...)
  let len = '%#Function# '.a:1.' %*'
  let dir = ' %=%<%#LineNr# '.getcwd().' %*'
  retu len.dir
endf

set shortmess=atToOI

nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

nnoremap ; :

let g:ackhighlight = 1

nnoremap <leader>a :Ack!<space>

inoremap jj <ESC>

nnoremap <silent> <leader>p :set rnu! list! number!<CR>
nnoremap <silent> <leader>n :set rnu!<CR>

nmap <leader>h <Plug>HexHighlightToggle

map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
  \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
  \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

function! SyntaxItem()
  return synIDattr(synID(line("."),col("."),1),"name")
endfunction
