" vi: fdm=marker

" github.com/blaenk :: @blaenk
" http://blaenkdenum.com

" Initialization: {{{
set nocompatible
set encoding=utf-8
set fenc=utf-8
set termencoding=utf-8

if has('win32')
  set rtp+=~/.vim
endif
" }}}

" Colors: {{{
set t_Co=256
colorscheme solarized
set background=light
syntax on
" }}}

" Vundle: {{{
" awesome trick by github.com/rson
if !isdirectory(expand("~/.vim/bundle/vundle/.git"))
  !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
endif

source ~/.vim/conf/bundles.vim
" }}}

" Settings: {{{
set backup
set backupdir=~/.vim/backups
set undofile
set undodir=~/.vim/undo
set directory=~/.vim/tmp
set tags=./tags;

set backspace=indent,eol,start
set laststatus=2
set expandtab
set tabstop=2
set softtabstop=2
set shiftwidth=0
set autoindent

set gcr=a:block

" mode aware cursors
set gcr+=o:hor50-Cursor
set gcr+=n:Cursor
set gcr+=i-ci-sm:InsertCursor
set gcr+=r-cr:ReplaceCursor-hor20
set gcr+=c:CommandCursor
set gcr+=v-ve:VisualCursor

set gcr+=a:blinkon0

hi InsertCursor  ctermfg=15 guifg=#fdf6e3 ctermbg=37  guibg=#2aa198
hi VisualCursor  ctermfg=15 guifg=#fdf6e3 ctermbg=125 guibg=#d33682
hi ReplaceCursor ctermfg=15 guifg=#fdf6e3 ctermbg=65  guibg=#dc322f
hi CommandCursor ctermfg=15 guifg=#fdf6e3 ctermbg=166 guibg=#cb4b16

set shortmess=atToOI
set viewoptions+=unix,slash

set wildmenu
set wildmode=list:longest

set scrolloff=5
set showmode
set showcmd
set hidden
set visualbell
set relativenumber
set number
set ttyfast

set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch

set splitbelow
set splitright

set wrap
set listchars=tab:▸\ ,eol:¬
set list
" }}}

" OS Specific: {{{

" Windows: {{{2
if has('win32')
  set gfn=Consolas:h10
  set clipboard=unnamed
" }}}

" UNIX: {{{2
else
  let s:kernel = system('echo -n "$(uname -s)"')

" Mac: {{{3
  if s:kernel == 'Darwin'
    set gfn=Menlo:h12
    " this doesn't work in mountain lion's default vim (does on macvim)
    set clipboard=unnamed
" }}}

" Linux: {{{3
  elseif s:kernel == 'Linux'
    set guifont=DejaVu_Sans_Mono_10

    " make the default clipboard be X11's
    set clipboard=unnamedplus
  endif
" }}}

endif
" }}}

" }}}

" Tabs: {{{

function! TabLabels()
  return gettabvar(v:lnum, 'label')
endfunction

set gtl=%{TabLabels()}

function! LabelTab(label)
  let t:label = a:label
  exe 'set showtabline=2'
endfunction

command! -nargs=1 LabelTab call LabelTab(<q-args>)

function! TabTip()
  let bufnrlist = tabpagebuflist(v:lnum)
  let tip = ''
  for bufnr in bufnrlist
    let name = bufname(bufnr)
    if !empty(name)
      if !empty(tip)
        let tip .= " \n "
      endif

      let tip .= name

      if getbufvar(bufnr, "&modified")
        let tip .= ' [+]'
      endif
    endif
  endfor
  return tip
endfunction

set gtt=%{TabTip()}

" }}}

" Status Line: {{{

" Status Function: {{{2
function! Status(winnr)
  let stat = ''
  let active = winnr() == a:winnr
  let buffer = winbufnr(a:winnr)

  let modified = getbufvar(buffer, '&modified')
  let readonly = getbufvar(buffer, '&ro')
  let fname = bufname(buffer)

  function! Color(active, num, content)
    if a:active
      return '%' . a:num . '*' . a:content . '%*'
    else
      return a:content
    endif
  endfunction

  " column
  let stat .= '%1*' . (col(".") / 100 >= 1 ? '%v ' : ' %2v ') . '%*'

  " file
  let stat .= Color(active, 4, active ? ' »' : ' «')
  let stat .= ' %<'

  if fname == '__Gundo__'
    let stat .= 'Gundo'
  elseif fname == '__Gundo_Preview__'
    let stat .= 'Gundo Preview'
  else
    let stat .= '%f'
  endif

  let stat .= ' ' . Color(active, 4, active ? '«' : '»')

  " file modified
  let stat .= Color(active, 2, modified ? ' +' : '')

  " read only
  let stat .= Color(active, 2, readonly ? ' ‼' : '')

  " paste
  if active && &paste
    let stat .= ' %2*' . 'P' . '%*'
  endif

  " right side
  let stat .= '%='

  " git branch
  if exists('*fugitive#head')
    let head = fugitive#head()

    if empty(head) && exists('*fugitive#detect') && !exists('b:git_dir')
      call fugitive#detect(getcwd())
      let head = fugitive#head()
    endif
  endif

  if !empty(head)
    let stat .= Color(active, 3, ' ← ') . head . ' '
  endif

  return stat
endfunction
" }}}

" Status AutoCMD: {{{
function! SetStatus()
  for nr in range(1, winnr('$'))
    call setwinvar(nr, '&statusline', '%!Status('.nr.')')
  endfor
endfunction

augroup status
  autocmd!
  autocmd VimEnter,WinEnter,BufWinEnter,BufUnload * call SetStatus()
augroup END
" }}}

" Status Colors: {{{
hi User1 ctermfg=33  guifg=#268bd2  ctermbg=15 guibg=#fdf6e3 gui=bold
hi User2 ctermfg=125 guifg=#d33682  ctermbg=7  guibg=#eee8d5 gui=bold
hi User3 ctermfg=64  guifg=#719e07  ctermbg=7  guibg=#eee8d5 gui=bold
hi User4 ctermfg=37  guifg=#2aa198  ctermbg=7  guibg=#eee8d5 gui=bold
" }}}

" }}}

" Mappings: {{{
let mapleader = ","

" Modes: {{{2
nnoremap <silent> <M-p> :set paste!<CR>
nnoremap <silent> <leader>l :noh<CR>
nnoremap <silent> <leader>n :set rnu!<CR>
nnoremap <silent> <leader>t :set rnu! list! number!<CR>
nnoremap <silent> <leader>s :set spell!<CR>

inoremap kj <ESC>

nnoremap ; :
" }}}

" Editing: {{{2
" 'force' write
cmap w!! %!sudo tee > /dev/null %

map <Leader>o o<Esc>ko

nmap gy `[v`]

nnoremap ) %
vnoremap ) %

vnoremap > >gv
vnoremap < <gv

nnoremap <M-c> y
nnoremap <M-v> p

vnoremap <M-c> y
vnoremap <M-v> p

imap <M-v> <C-r>+
" }}}

" Navigation: {{{2
noremap H ^
noremap L $

nnoremap <C-J> <C-W>-
nnoremap <C-K> <C-W>+
nnoremap <C-L> <C-W>>
nnoremap <C-H> <C-W><

nnoremap <M-h> gT
nnoremap <M-l> gt

nnoremap <silent> <M-j> :tabmove -1<CR>
nnoremap <silent> <M-k> :tabmove +1<CR>
" }}}

" Plugins_Misc: {{{2
map <F10> :echo HighlightGroups()<CR>

function! HighlightGroups()
  let l:h = synIDattr(synID(line('.'), col('.'), 1), 'name')
  let l:t = synIDattr(synID(line('.'), col('.'), 0), 'name')
  let l:l = synIDattr(synIDtrans(synID(line('.'), col('.'), 1)), 'name')

  let l:fg = synIDattr(synIDtrans(synID(line('.'), col('.'), 1)), 'fg#')
  let l:bg = synIDattr(synIDtrans(synID(line('.'), col('.'), 1)), 'bg#')

  let msg = ''

  let msg .= !empty(l:fg) ? (l:fg . ' ') : ''
  let msg .= !empty(l:bg) ? ((!empty(l:fg) ? '/' : '') . l:bg . ' ') : ''

  let msg .= !empty(l:h) ? (l:h . ' ') : ''
  let msg .= (!empty(l:t) && l:t != l:h) ? ('-> ' . l:t . ' ') : ''
  let msg .= !empty(l:l) ? ('-> ' . l:l . ' ') : ''

  return msg
endfunction

nnoremap <leader>r :RainbowParenthesesToggle<CR>
nnoremap <leader>h <Plug>HexHighlightToggle
nnoremap <silent> <leader>u :GundoToggle<CR>
" }}}

" }}}

" Plugins: {{{

" Pandoc: {{{2
let g:pantondoc_use_pandoc_markdown = 1
let g:pantondoc_formatting_settings = 's'
let g:pandoc_use_embeds_in_codeblocks_for_langs = []
let g:pandoc_no_empty_implicits = 1
" }}}

" YCM: {{{2
let g:ycm_filetype_whitelist = {'cpp': 0}
" }}}

" GitGutter: {{{2
let g:gitgutter_enabled = 0
let g:gitgutter_realtime = 0
let g:gitgutter_sign_modified = '#'

nnoremap <leader>g :GitGutterToggle<CR>
" }}}

" Unite: {{{
let g:unite_data_directory='~/.vim/unite'
let g:unite_enable_start_insert = 1
let g:unite_prompt='» '
let g:unite_source_history_yank_enable = 1
let g:unite_source_rec_max_cache_files=5000
let g:unite_split_rule = "botright"
let g:unite_winheight = 10
let g:unite_force_overwrite_statusline = 0

" mappings
nnoremap <silent> <leader>u :Unite -toggle -auto-resize -buffer-name=files file_rec:!<CR>

" appearance
let g:unite_candidate_icon = '-'
let g:unite_cursor_line_highlight = 'InsertCursor'
let g:unite_marked_icon = '+'

let s:unite_ignores = [
  \ '\.git', 'deploy', 'dist',
  \ 'undo', 'tmp', 'backups',
  \ 'generated', 'build', 'images']

"call unite#filters#matcher_default#use(['matcher_fuzzy'])
"call unite#filters#sorter_default#use(['sorter_rank'])
" sorter_word
" call unite#custom#source('line', 'matchers', 'matcher_fuzzy')
" call unite#custom#profile('files', 'filters', ['sorter_length'])
call unite#custom#source('file,file/new,buffer,file_rec', 'matchers', 'matcher_fuzzy')
call unite#custom#source('file,file/new,buffer,file_rec', 'sorters', 'sorter_length')

call unite#custom#source('file_rec,file_rec/async,file_mru,file,buffer,grep',
  \ 'ignore_pattern', unite#get_all_sources('file_rec')['ignore_pattern'] .
  \ join(s:unite_ignores, '\|'))

if executable('ag')
  let g:unite_source_grep_command='ag'
  let g:unite_source_grep_default_opts='--nocolor --nogroup -S -C4'
  let g:unite_source_grep_recursive_opt=''
elseif executable('ack')
  let g:unite_source_grep_command='ack'
  let g:unite_source_grep_default_opts='--no-heading --no-color -a -C4'
  let g:unite_source_grep_recursive_opt=''
endif

autocmd FileType unite call s:unite_settings()

function! s:unite_settings()
  " refer to :h unite_default_key_mappings
  " quick refresher
  "   redraw: c-l
  "   space: mark current line
  "   tab: c-t
  "   hsplit: c-x
  "   vsplit: c-v

  imap <buffer> <C-c> i_<Plug>(unite_exit)

  nmap <silent><buffer><expr> <C-h> unite#do_action('split')
  nmap <silent><buffer><expr> <C-v> unite#do_action('vsplit')

  imap <silent><buffer><expr> <C-h> unite#do_action('split')
  imap <silent><buffer><expr> <C-v> unite#do_action('vsplit')

  let &l:stl = 'unite » ' . unite#get_status_string()
endfunction
" }}}

" CtrlP: {{{2

" Settings: {{{3
let g:ctrlp_map = '<leader>f'
let g:ctrlp_custom_ignore = {
  \ 'dir': '\v[\/](\.(git|hg|svn))|deploy|dist|generated|build|images$',
  \ 'file': '\v\.(DS_Store)$',
  \ }
let g:ctrlp_working_path_mode = 'ra'
" let g:ctrlp_open_new_file = 't'
" let g:ctrlp_open_multiple_files = 't'
" let g:ctrlp_prompt_mappings = {
"   \ 'AcceptSelection("t")': ['<cr>'],
"   \ 'AcceptSelection("e")': ['<s-cr>']
"   \ }

map <leader>b :CtrlPBuffer<cr>
" }}}

" StatusLine: {{{3
" Arguments: focus, byfname, s:regexp, prv, item, nxt, marked
"            a:1    a:2      a:3       a:4  a:5   a:6  a:7
fu! CtrlP_main_status(...)
  let regex = a:3 ? '%#CtrlP_Violet#regex %*' : ''
  let prv = '%#CtrlP_Purple# '.a:4.' %*'
  let item = '%#CtrlP_IPurple# '.a:5.' %*'
  let nxt = '%#CtrlP_Purple# '.a:6.' %*'
  let byfname = '%#CtrlP_Violet# '.a:2.' %*'
  let dir = '%#CtrlP_Purple# '.fnamemodify(getcwd(), ':~').' %*'
  retu prv . item . nxt . '%#CtrlP_Violet#%=%*%<' . byfname . regex . dir
endf
 
" Argument: len
"           a:1
fu! CtrlP_progress_status(...)
  let len = '%#Function# '.a:1.' %*'
  let dir = ' %=%<%#LineNr# '.getcwd().' %*'
  retu len.dir
endf

hi CtrlP_Purple  ctermfg=255 guifg=#ffffff  ctermbg=54  guibg=#5f5faf
hi CtrlP_IPurple ctermfg=54  guifg=#5f5faf  ctermbg=255 guibg=#ffffff
hi CtrlP_Violet  ctermfg=54  guifg=#5f5faf  ctermbg=104 guibg=#aeaed7

let g:ctrlp_status_func = {
  \ 'main': 'CtrlP_main_status',
  \ 'prog': 'CtrlP_progress_status'
  \}
" }}}

" }}}

" Gist: {{{2
let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1
" }}}

" Ack: {{{2
let g:ackhighlight = 1
nnoremap <leader>a :Ack!<space>
" }}}

" }}}

" AutoCMDs: {{{
filetype plugin indent on

augroup filespecific
  autocmd!
  au BufRead,BufNewFile *.json set filetype=javascript
  au BufRead,BufNewFile *.py set tabstop=4
augroup END

augroup cursorline
  autocmd!
  autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  autocmd WinLeave * setlocal nocursorline
augroup END
" }}}
