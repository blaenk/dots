" vi: fdm=marker

" github.com/blaenk :: @blaenk
" http://blaenkdenum.com

" Initialization: {{{
set nocompatible
set encoding=utf-8
set fenc=utf-8
set termencoding=utf-8

if has('win32')
  set rtp+=~/.vim
endif
" }}}

" Colors: {{{
colorscheme solarized
let g:solarized_termcolors = 256
set background=light
syntax on
" }}}

" Vundle: {{{
" awesome trick by github.com/rson
if !isdirectory(expand("~/.vim/bundle/vundle/.git"))
  !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
endif

source ~/.vim/conf/bundles.vim
" }}}

" Settings: {{{
set backup
set backupdir=~/.vim/backups
set undofile
set undodir=~/.vim/undo
set directory=~/.vim/tmp
set tags=./tags;

set backspace=indent,eol,start
set laststatus=2
set expandtab
set tabstop=2
set softtabstop=2
set shiftwidth=0
set autoindent

set gcr+=a:blinkon0
set shortmess=atToOI

set wildmenu
set wildmode=list:longest

set showmode
set showcmd
set hidden
set visualbell
set relativenumber
set number
set ttyfast

set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch

set splitbelow
set splitright

set wrap
set listchars=tab:▸\ ,eol:¬
set list
" }}}

" OS Specific: {{{

" Windows: {{{2
if has('win32')
  set gfn=Consolas:h10
  set clipboard=unnamed
" }}}

" UNIX: {{{2
else
  let s:kernel = system('echo -n "$(uname s)"')

" Mac: {{{3
  if s:kernel == 'Darwin'
    set gfn=Menlo:h12
    " this doesn't work in mountain lion's default vim (does on macvim)
    set clipboard=unnamed
" }}}

" Linux: {{{3
  elseif s:kernel == 'Linux'
    set t_Co=256

    set guifont=DejaVu\ Sans\ Mono\ 10

    " make the default clipboard be X11's
    set clipboard=unnamedplus
  endif
" }}}

endif
" }}}

" }}}

" Status Line: {{{

" Status Function: {{{2
function! Status(winnr)
  let s:stat = ""
  let s:active = winnr() == a:winnr

  function! Color(active, num, content)
    if a:active
      return '%' . a:num . '*' . a:content . '%*'
    else
      return a:content
    endif
  endfunction

  " column
  let s:stat .= '%1*' . (col(".") / 100 >= 1 ? '%v ' : ' %2v ') . '%*'

  " file
  let s:stat .= Color(s:active, 4, s:active ? ' »' : ' «')
  let s:stat .= ' %<%f '
  let s:stat .= Color(s:active, 4, s:active ? '«' : '»')

  " file modified
  let s:stat .= Color(s:active, 2, getbufvar(winbufnr(a:winnr), '&modified') == 1 ? ' +' : '')

  " read only
  let s:stat .= Color(s:active, 2, getbufvar(winbufnr(a:winnr), '&ro') == 1 ? ' ‼' : '')

  " paste
  if s:active && &paste
    let s:stat .= ' %2*' . 'P' . '%*'
  endif

  " right side
  let s:stat .= '%='

  " git branch
  if exists('*fugitive#head')
    let head = fugitive#head()

    if empty(head) && exists('*fugitive#detect') && !exists('b:git_dir')
      call fugitive#detect(getcwd())
      let head = fugitive#head()
    endif
  endif

  if !empty(head)
    let s:stat .= Color(s:active, 3, ' ← ') . head . ' '
  endif

  return s:stat
endfunction
" }}}

" Status AutoCMD: {{{
function! SetStatus()
  " inactives
  for nr in filter(range(1, winnr('$')), 'v:val != winnr()')
    call setwinvar(nr, '&statusline', '%!Status('.nr.')')
  endfor

  " actives
  let nr = winnr()
  call setwinvar(nr, '&statusline', '%!Status('.nr.')')
endfunction

augroup status
  autocmd!
  autocmd VimEnter,WinEnter,BufWinEnter,BufUnload * call SetStatus()
augroup END
" }}}

" Status Colors: {{{
hi User1 ctermfg=33  guifg=#268bd2  ctermbg=15 guibg=#fdf6e3 gui=bold
hi User2 ctermfg=125 guifg=#d33682  ctermbg=7  guibg=#eee8d5 gui=bold
hi User3 ctermfg=64  guifg=#719e07  ctermbg=7  guibg=#eee8d5 gui=bold
hi User4 ctermfg=37  guifg=#2aa198  ctermbg=7  guibg=#eee8d5 gui=bold
" }}}

" }}}

" Mappings: {{{
let mapleader = ","

" Modes: {{{2
nnoremap <silent> <M-p> :set paste!<CR>
nnoremap <silent> <leader>l :noh<CR>
nnoremap <silent> <leader>n :set rnu!<CR>
nnoremap <silent> <leader>p :set rnu! list! number!<CR>
nnoremap <silent> <leader>s :set spell!<CR>

inoremap jj <ESC>
nnoremap ; :
" }}}

" Editing: {{{2
" 'force' write
cmap w!! %!sudo tee > /dev/null %

map <Leader>o o<Esc>ko

vnoremap > >gv
vnoremap < <gv

nnoremap <M-c> y
nnoremap <M-v> p

vnoremap <M-c> y
vnoremap <M-v> p

imap <M-v> <C-r>+
" }}}

" Navigation: {{{2
nnoremap <C-J> <C-W>-
nnoremap <C-K> <C-W>+
nnoremap <C-L> <C-W>>
nnoremap <C-H> <C-W><

nnoremap <M-h> gT
nnoremap <M-l> gt

nnoremap <silent> <M-j> :execute "tabmove" tabpagenr() - 2<CR>
nnoremap <silent> <M-k> :execute "tabmove" tabpagenr()<CR>
" }}}

" Plugins_Misc: {{{2
map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
  \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
  \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

function! SyntaxItem()
  return synIDattr(synID(line("."),col("."),1),"name")
endfunction

nnoremap <leader>r :RainbowParenthesesToggle<CR>
nmap <leader>h <Plug>HexHighlightToggle
nnoremap <silent> <leader>u :GundoToggle<CR>
" }}}

" }}}

" Plugins: {{{

" Pandoc: {{{2
let g:pantondoc_use_pandoc_markdown = 1
let g:pantondoc_formatting_settings = 's'
let g:pandoc_use_embeds_in_codeblocks_for_langs = []
let g:pandoc_no_empty_implicits = 1
" }}}

" YCM: {{{2
let g:ycm_filetype_whitelist = {'cpp': 0}
" }}}

" GitGutter: {{{2
let g:gitgutter_enabled = 0
let g:gitgutter_realtime = 0
let g:gitgutter_sign_modified = '#'

nnoremap <leader>g :GitGutterToggle<CR>
" }}}

" CtrlP: {{{2

" Settings: {{{3
let g:ctrlp_map = '<leader>f'
let g:ctrlp_custom_ignore = {
  \ 'dir': '\v[\/](\.(git|hg|svn))|deploy|dist|generated|build$',
  \ 'file': '\v\.(DS_Store)$',
  \ }
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_open_new_file = 't'
let g:ctrlp_open_multiple_files = 't'
let g:ctrlp_prompt_mappings = {
  \ 'AcceptSelection("t")': ['<cr>'],
  \ 'AcceptSelection("e")': ['<s-cr>']
  \ }

"let g:ctrlp_working_path_mode = 1 set working dir to parent dir of cur file
map <leader>b :CtrlPBuffer<cr>
" }}}

" StatusLine: {{{3
" Arguments: focus, byfname, s:regexp, prv, item, nxt, marked
"            a:1    a:2      a:3       a:4  a:5   a:6  a:7
fu! CtrlP_main_status(...)
  let regex = a:3 ? '%#CtrlP_Violet#regex %*' : ''
  let prv = '%#CtrlP_Purple# '.a:4.' %*'
  let item = '%#CtrlP_IPurple# '.a:5.' %*'
  let nxt = '%#CtrlP_Purple# '.a:6.' %*'
  let byfname = '%#CtrlP_Violet# '.a:2.' %*'
  let dir = '%#CtrlP_Purple# '.fnamemodify(getcwd(), ':~').' %*'
  retu prv . item . nxt . '%#CtrlP_Violet#%=%*%<' . byfname . regex . dir
endf
 
" Argument: len
"           a:1
fu! CtrlP_progress_status(...)
  let len = '%#Function# '.a:1.' %*'
  let dir = ' %=%<%#LineNr# '.getcwd().' %*'
  retu len.dir
endf

hi CtrlP_Purple  ctermfg=255 guifg=#ffffff  ctermbg=54  guibg=#5f5faf
hi CtrlP_IPurple ctermfg=54  guifg=#5f5faf  ctermbg=255 guibg=#ffffff
hi CtrlP_Violet  ctermfg=54  guifg=#5f5faf  ctermbg=104 guibg=#aeaed7

let g:ctrlp_status_func = {
  \ 'main': 'CtrlP_main_status',
  \ 'prog': 'CtrlP_progress_status'
  \}
" }}}

" }}}

" Gist: {{{2
let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1
" }}}

" Ack: {{{2
let g:ackhighlight = 1
nnoremap <leader>a :Ack!<space>
" }}}

" }}}

" AutoCMDs: {{{
filetype plugin indent on

augroup filespecific
  autocmd!
  au BufRead,BufNewFile *.json set filetype=javascript
  au BufRead,BufNewFile *.py set tabstop=4
augroup END

augroup cursorline
  autocmd!
  autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  autocmd WinLeave * setlocal nocursorline
augroup END
" }}}
