set nocompatible
set encoding=utf-8
set fenc=utf-8
set termencoding=utf-8

if has('win32')
  set rtp+=~/.vim
endif

colorscheme solarized
set background=light
syntax on

" awesome trick by github.com/rson
" if !isdirectory(expand("~/.vim/bundle/vundle/.git"))
"   !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
" endif

source ~/.vim/conf/bundles.vim

let mapleader = ","

nmap <silent> <leader>s :set spell!<CR>
nnoremap <silent> <leader>u :GundoToggle<CR>
nnoremap <silent> <esc> :noh<return><esc>

" consider hjkl cartesian x/y axis with
" positve up and right, negative left down
nnoremap <C-J> <C-W>-
nnoremap <C-K> <C-W>+
nnoremap <C-L> <C-W>>
nnoremap <C-H> <C-W><

vnoremap > >gv
vnoremap < <gv

" tab navigation
nnoremap <M-h> gT
nnoremap <M-l> gt

nnoremap <silent> <M-j> :execute "tabmove" tabpagenr() - 2<CR>
nnoremap <silent> <M-k> :execute "tabmove" tabpagenr()<CR>

" meta key copying like in map
nnoremap <M-c> y
nnoremap <M-v> p

vnoremap <M-c> y
vnoremap <M-v> p

imap <M-v> <C-r>+

" general system specific configurations
if has('unix') && 'Darwin' != system('echo -n "$(uname)"')
  " linux
  if $COLORTERM == 'gnome-terminal'
    set t_Co=256
  endif

  set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 10

  " make the default clipboard be X11's
  set clipboard=unnamedplus
elseif has('unix') && 'Darwin' == system('echo -n "$(uname)"')
  " mac
  set gfn=Menlo\ for\ Powerline:h12
  " this doesn't work in mountain lion's default vim (does on macvim)
  set clipboard=unnamed
elseif !has('unix')
  " windows
  set gfn=Consolas\ for\ Powerline\ FixedD:h10
  set clipboard=unnamed
endif

let g:airline_theme = 'solarized'

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

let g:airline_left_sep = '⮀'
let g:airline_left_alt_sep = '⮁'
let g:airline_right_sep = '⮂'
let g:airline_right_alt_sep = '⮃'
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = '⭤'
let g:airline_symbols.linenr = '⭡'

let g:airline_powerline_fonts = 'fancy'
let g:airline#extensions#hunks#enabled = 0
let g:airline#extensions#whitespace#enabled = 0

function! AirLineBlaenk()
  function! Modified()
    return &modified ? "+" : ''
  endfunction

  call airline#parts#define_raw('filename', '%<%f')
  call airline#parts#define_function('modified', 'Modified')

  let g:airline_section_b = airline#section#create_left(['filename', 'modified'])
  let g:airline_section_c = airline#section#create([''])
  let g:airline_section_gutter = airline#section#create(['', '%='])
  let g:airline_section_x = airline#section#create_right([''])
  let g:airline_section_y = airline#section#create_right(['%c'])
  let g:airline_section_z = airline#section#create(['branch'])
endfunction

autocmd Vimenter * call AirLineBlaenk()

let g:airline_theme_patch_func = 'AirLineBlaenkTheme'

" 0,1: gfg, gbg; 2,3: tfg, tbg; 4: styles
function! AirLineBlaenkTheme(palette)
  if g:airline_theme == 'solarized'
    let purple = ['#ffffff', '#5f5faf', 255, 13, '']
    let violet = ['#5f5faf', '#aeaed7', 13, 61, '']
    let inv_purple = ['#5f5faf', '#ffffff', 13, 255, '']
    let purple_violet = ['#5f5faf', '#aeaed7', 61, 13, '']

    " dark = middle
    " white = focus
    " light = edges

    let a:palette.ctrlp = {
      \ 'CtrlPlight' : purple,
      \ 'CtrlPwhite' : inv_purple,
      \ 'CtrlPdark'  : violet,
      \ 'CtrlParrow1': inv_purple,
      \ 'CtrlParrow2': purple,
      \ 'CtrlParrow3': purple_violet,
      \ }

    let secondary = ['#ffffff', '#657b83', 255, 240, '']

    let magenta = ['#ffffff', '#d33682', 255, 125, '']
    let blue = ['#ffffff', '#268bd2', 255, 33, '']
    let green = ['#ffffff', '#859900', 255, 64, '']
    let red = ['#ffffff', '#dc322f', 255, 160, '']
    let orange = ['#ffffff', '#cb4b16', 255, 166, '']

    let modes = {
      \ 'normal': blue,
      \ 'insert': green,
      \ 'replace': magenta,
      \ 'visual': orange
      \}

    let a:palette.replace = copy(a:palette.insert)
    let a:palette.replace_modified = a:palette.insert_modified

    for key in keys(modes)
      let a:palette[key].airline_a = modes[key]
      let a:palette[key].airline_z = modes[key]

      let a:palette[key].airline_b = secondary
      let a:palette[key].airline_y = secondary
    endfor

    for key in ['insert', 'visual', 'normal']
      " no red on modified
      let a:palette[key . '_modified'].airline_c[0] = '#657b83'
      let a:palette[key . '_modified'].airline_c[2] = 11

      for section in ['a', 'b', 'y', 'z']
        let airline_section = 'airline_' . section
        if has_key(a:palette[key], airline_section)
          " white foreground for most components; better contrast imo
          let a:palette[key][airline_section][0] = '#ffffff'
          let a:palette[key][airline_section][2] = 255
        endif
      endfor
    endfor
  endif
endfunction

let g:airline#extensions#default#section_truncate_width = {
  \ 'x': 60,
  \ 'y': 60
  \ }

let g:airline_mode_map = {
  \ '__' : '-',
  \ 'n'  : 'N',
  \ 'i'  : 'I',
  \ 'R'  : 'R',
  \ 'v'  : 'V',
  \ 'V'  : 'V-L',
  \ 'c'  : 'C',
  \ '' : 'V-B',
  \ 's'  : 'S',
  \ 'S'  : 'S-L',
  \ '' : 'S-B',
  \ }

let g:gitgutter_enabled = 0
let g:gitgutter_realtime = 0
let g:gitgutter_sign_modified = '#'

nnoremap <leader>g :GitGutterToggle<CR>
nnoremap <leader>r :RainbowParenthesesToggle<CR>

let g:pandoc_no_empty_implicits = 1

let g:ctrlp_map = '<leader>f'
let g:ctrlp_custom_ignore = {
  \ 'dir': '\v[\/](\.(git|hg|svn))|deploy|dist|generated|build$',
  \ 'file': '\v\.(DS_Store)$',
  \ }
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_open_new_file = 't'
let g:ctrlp_open_multiple_files = 't'
let g:ctrlp_prompt_mappings = {
  \ 'AcceptSelection("t")': ['<cr>'],
  \ 'AcceptSelection("e")': ['<s-cr>']
  \ }

"let g:ctrlp_working_path_mode = 1 set working dir to parent dir of cur file
map <leader>b :CtrlPBuffer<cr>

" objective-c
let g:alternateExtensions_m = "h"
let g:alternateExtensions_h = "m"

let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1

set pastetoggle=<M-p>
set backspace=indent,eol,start
set backup
set backupdir=~/.vim/backups
set directory=~/.vim/tmp
set undodir=~/.vim/undo
set tags=./tags;
let g:easytags_dynamic_files = 1
"let g:easytags_file = '~/.vim/tags'

cmap w!! %!sudo tee > /dev/null %

map <Leader>o o<Esc>ko
set laststatus=2
set tabstop=2
set shiftwidth=2
set expandtab
set softtabstop=2
set autoindent
set gcr+=a:blinkon0
set undofile

filetype plugin indent on
au BufRead,BufNewFile *.json set filetype=javascript

set wildmenu
set wildmode=list:longest

set showmode
set showcmd
set hidden
set visualbell
set cursorline
set ttyfast
set ruler
set relativenumber
set number

"nnoremap / /\v
"vnoremap / /\v
set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch

set splitbelow
set splitright

set wrap
set listchars=tab:▸\ ,eol:¬
set list

nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

nnoremap ; :

let g:ackhighlight = 1

nnoremap <leader>a :Ack!<space>

inoremap jj <ESC>

nnoremap <leader>p :set rnu! list! number!<CR>
nnoremap <silent> <leader>n :set rnu!<CR>
nmap <leader>h <Plug>HexHighlightToggle

map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
  \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
  \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

function! SyntaxItem()
  return synIDattr(synID(line("."),col("."),1),"name")
endfunction
